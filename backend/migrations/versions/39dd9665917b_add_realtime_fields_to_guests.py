"""add_realtime_fields_to_guests

Revision ID: 39dd9665917b
Revises: a1b68f51857b
Create Date: 2025-08-04 11:57:42.217814

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '39dd9665917b'
down_revision: Union[str, Sequence[str], None] = 'a1b68f51857b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_attendance_logs_id'), table_name='attendance_logs')
    op.drop_table('attendance_logs')
    op.drop_index(op.f('ix_realtime_notifications_id'), table_name='realtime_notifications')
    op.drop_table('realtime_notifications')
    op.drop_index(op.f('ix_audit_log_id'), table_name='audit_log')
    op.drop_table('audit_log')
    op.drop_index(op.f('ix_greetings_id'), table_name='greetings')
    op.drop_table('greetings')
    op.add_column('guests', sa.Column('qr_code', sa.String(), nullable=True))
    op.add_column('guests', sa.Column('check_in_time', sa.DateTime(), nullable=True))
    op.add_column('guests', sa.Column('check_out_time', sa.DateTime(), nullable=True))
    op.add_column('guests', sa.Column('is_overbooked', sa.Boolean(), nullable=True))
    op.add_column('guests', sa.Column('last_scan_time', sa.DateTime(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('guests', 'last_scan_time')
    op.drop_column('guests', 'is_overbooked')
    op.drop_column('guests', 'check_out_time')
    op.drop_column('guests', 'check_in_time')
    op.drop_column('guests', 'qr_code')
    op.create_table('greetings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('guest_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('signer_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_approved', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('greetings_event_id_fkey')),
    sa.ForeignKeyConstraint(['guest_id'], ['guests.id'], name=op.f('greetings_guest_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('greetings_pkey'))
    )
    op.create_index(op.f('ix_greetings_id'), 'greetings', ['id'], unique=False)
    op.create_table('audit_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('field', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('old_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('new_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('audit_log_pkey'))
    )
    op.create_index(op.f('ix_audit_log_id'), 'audit_log', ['id'], unique=False)
    op.create_table('realtime_notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('notification_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('guest_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('table_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('realtime_notifications_event_id_fkey')),
    sa.ForeignKeyConstraint(['guest_id'], ['guests.id'], name=op.f('realtime_notifications_guest_id_fkey')),
    sa.ForeignKeyConstraint(['table_id'], ['tables.id'], name=op.f('realtime_notifications_table_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('realtime_notifications_pkey'))
    )
    op.create_index(op.f('ix_realtime_notifications_id'), 'realtime_notifications', ['id'], unique=False)
    op.create_table('attendance_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('guest_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('check_in_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('check_out_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('scanned_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('qr_code_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('attendance_logs_event_id_fkey')),
    sa.ForeignKeyConstraint(['guest_id'], ['guests.id'], name=op.f('attendance_logs_guest_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('attendance_logs_pkey'))
    )
    op.create_index(op.f('ix_attendance_logs_id'), 'attendance_logs', ['id'], unique=False)
    # ### end Alembic commands ###
